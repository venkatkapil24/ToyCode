        !********************************************************
        !*                      TOYCODE-1.0                     *
        !*                                                      *
        !*      A MD PLATFORM FOR TESTING ENHANCED              *
        !*      SAMPLING ALGORITHMS.                            *
        !*                                                      *
        !*      DEVELOPED BY VENKAT KAPIL                       *
        !*      CONTACT : venkat@iitk.ac.in                     *
        !*                                                      *
        !*      COPYRIGHT (C) 2014 VENKAT KAPIL                 *
        !*      SOME RIGHTS RESERVED.                           *
        !*                                                      *                                                       
        !********************************************************

	!THIS FILE CONTAINS SUBROUTINES THAT GOVERN UMBRELLA SAMPLING. 
	!THEY ARE AS FOLLOWS:
	!	*) UMBR_INITIALIZE
	!	*) UMBR_UPDATE

	!SUBROUTINE *) UMBR_INITIALIZE
	!THIS SUBROUTINE INITIALIZES UMBRELLA PARAMETERS.
	SUBROUTINE UMBR_INITIALIZE
	USE PARAM
        USE UMBRSAMP
        USE METADYN
        USE CONSTANTS
        USE FORCEFIELD
	IMPLICIT NONE
	INTEGER ITER, FILESIZE, DUMMY1
	CHARACTER (LEN=50) FORMAT1
	!DYNAMICALLY DEFINES MEAN VALUE OF UMBRELLA.
        ALLOCATE( UMBR_MEAN(UMBR_DIM) )
        !SETS EXIT CONDITION TO FALSE.
        UMBR_EXIT = .FALSE.
        !INITIALIZES THE CENTRE OF THE UMBRELLA.
	UMBR_FILESIZE = 1
	DO ITER=1,UMBR_DIM
        	UMBR_MEAN(ITER) = UMBR_RANGE(ITER,1)
		UMBR_FILESIZE = UMBR_FILESIZE * UMBR_N(ITER)
	ENDDO
	!CALCULATES NUMBER FILESIZE.
	UMBR_FILESIZE= DLOG10( DFLOAT(UMBR_FILESIZE) ) + 1
	!INITIALIZES FILENNUM ARRAY.
	ALLOCATE( UMBR_FILENUM(UMBR_FILESIZE) )
	DO ITER=1,UMBR_FILESIZE
		UMBR_FILENUM(ITER) = 0
	ENDDO
	!INITIALIZES COUNT.
	UMBR_COUNT = 1
	!INITIALIZES FILENAME FOR UMBRELLA SAMPLING.
	DUMMY1 = UMBR_COUNT
        DO ITER=1,UMBR_FILESIZE
                UMBR_FILENUM(ITER) = MOD(DUMMY1,10)
                DUMMY1 = DUMMY1/10
        ENDDO
	UMBR_FILE='UMBRELLA_SAMPLING/UMBR_FILE'
	!CREATES EMPTY FILE FOR UMBRELLA SAMPLING.
	WRITE(FORMAT1,'(A5,I1,A3)') '(A27,', UMBR_FILESIZE,'I1)'
        WRITE(UMBR_FILENAME,FORMAT1) UMBR_FILE, 
     &	(UMBR_FILENUM(ITER), ITER=UMBR_FILESIZE,1,-1)
	CALL CREATE_FILE( UMBR_FILENAME )
	!CHECKS FOR RESTRAINED METADYNAMICS.
	IF( META .EQV. .TRUE. ) THEN
	!INITIALIZES FILENAME FOR METADYNAMICS RESTART FILE.
		META_FILE='RESTART/RESTART_META'
	!CREATES EMPTY RESTART FILE FOR METADYNAMICS.
		WRITE(FORMAT1,'(A5,I1,A3)') '(A20,', UMBR_FILESIZE,'I1)'
		WRITE(META_FILENAME,FORMAT1) META_FILE,
     &		  (UMBR_FILENUM(ITER), ITER=UMBR_FILESIZE,1,-1)
		CALL CREATE_FILE( META_FILENAME )
		OPEN( UNIT =1, FILE = META_FILENAME )
		WRITE(1,*) META_N
		CLOSE(1)
	ENDIF
	!CREATES INPUTFILE FOR WHAM.
	CALL CREATE_FILE( 'UMBRELLA_SAMPLING/INPUT' ) 
	RETURN
	END SUBROUTINE

	!SUBROUTINE *) UMBR_UPDATE
	!THIS SUBROUTINE UPDATES UMBRELLA PARAMETERS AT THE END OF EACH MOLDYN SIMULATION. 
	SUBROUTINE UMBR_UPDATE
	USE PARAM
        USE UMBRSAMP
        USE METADYN
        USE CONSTANTS
	USE FORCEFIELD
	IMPLICIT NONE
	INTEGER ITER, DUMMY1
	REAL*8 DUMMY2, DUMMY3
        CHARACTER (LEN=50) FORMAT1
	!UPDATES FILENAME.
	UMBR_COUNT = UMBR_COUNT + 1
        DUMMY1 = UMBR_COUNT
	DO ITER=1,UMBR_FILESIZE
		UMBR_FILENUM(ITER) = MOD(DUMMY1,10)
		DUMMY1 = DUMMY1/10
	!CHECKS FOR THE CASE OF ONE UMBRELLA.
		IF( UMBR_N(ITER) .EQ. 1 ) THEN
			UMBR_EXIT = .TRUE.
                        EXIT
		ENDIF
	ENDDO
	!UPDATES UMBR_MEAN.
	DUMMY2=(UMBR_RANGE(1,2) - UMBR_RANGE(1,1))
     &          /DFLOAT(UMBR_N(1)-1)
        UMBR_MEAN(1) = UMBR_MEAN(1) + DUMMY2
	DO ITER=1,UMBR_DIM
	!CHECKS FOR EXIT CONDITION.
		IF( UMBR_EXIT .EQV. .TRUE. ) EXIT 
	!FINDS SHIFT IN UMBRELLA MEAN VALUE.
		DUMMY2=(UMBR_RANGE(ITER,2) - UMBR_RANGE(ITER,1))
     &		/DFLOAT(UMBR_N(ITER)-1)
	!CHECKS IF UMBRELLA MEAN VALUE DOESN'T EXCEED RANGE.
		DUMMY3 = DABS(UMBR_MEAN(ITER) - UMBR_RANGE(ITER,2)) 
		IF( ( UMBR_MEAN(ITER) .GT. UMBR_RANGE(ITER,2) ) .AND. 
     &		( DABS(DUMMY3-DUMMY2) .LT. DUMMY2/10 ) ) THEN 
	!CHECKS END CONDITION FOR UMBRELLA SAMPLING.
			IF( ITER .EQ. UMBR_DIM ) THEN
        			UMBR_EXIT = .TRUE.
				EXIT
			ENDIF
	!CALCULATES SHIFT IN UMBRELLA MEAN VALUE.
			DUMMY2=(UMBR_RANGE(ITER+1,2) - UMBR_RANGE(ITER+1,1))
     &			/DFLOAT(UMBR_N(ITER+1)-1)
	!UPDATES UMBRELLA MEAN.
			UMBR_MEAN(ITER+1) = UMBR_MEAN(ITER+1) + DUMMY2
			UMBR_MEAN(ITER) = UMBR_RANGE(ITER,1)
		ELSE
		ENDIF
	ENDDO
	!CREATES EMPTY FILE FOR UMBRELLA SAMPLING.
	WRITE(FORMAT1,'(A5,I1,A3)') '(A27,', UMBR_FILESIZE,'I1)'
        WRITE(UMBR_FILENAME,FORMAT1) UMBR_FILE,
     &  (UMBR_FILENUM(ITER), ITER=UMBR_FILESIZE,1,-1)
	CALL CREATE_FILE( UMBR_FILENAME )
        !INITIALIZATION FOR THE NEXT METADYNAMICS ROUND.
	IF (META .EQV. .TRUE.) THEN
		META_COUNT = 0
		META_ITER = 0
		META_TRIGGER = .TRUE.
		BIAS =0.0D0
		CT = 0.0D0
        !CREATES EMPTY RESTART FILE FOR METADYNAMICS.
		WRITE(FORMAT1,'(A5,I1,A3)') '(A20,', UMBR_FILESIZE,'I1)'
		WRITE(META_FILENAME,FORMAT1) META_FILE,
     &		(UMBR_FILENUM(ITER), ITER=UMBR_FILESIZE,1,-1)
       		CALL CREATE_FILE( META_FILENAME )
		OPEN( UNIT =1, FILE = META_FILENAME )
		WRITE(1,*) META_N
	CLOSE(1)
	ENDIF
	RETURN
	END SUBROUTINE

