	!********************************************************
	!*			TOYCODE-1.0			*
	!*							*
	!*	A MD PLATFORM FOR TESTING ENHANCED		*
	!*	SAMPLING ALGORITHMS.				*
	!*							*
	!*	DEVELOPED BY VENKAT KAPIL			*
	!*	CONTACT : venkat@iitk.ac.in			*
	!*							*
	!*	COPYRIGHT (C) 2014 VENKAT KAPIL			*
	!*	SOME RIGHTS RESERVED.				*
	!*							* 							
	!********************************************************

	!CALLS LIBRARY FILES.
	INCLUDE 'SUBROUTINES/UTILITIES.F'
	INCLUDE 'SUBROUTINES/PRINT.F'
	INCLUDE 'SUBROUTINES/INPUT.F'
	INCLUDE 'SUBROUTINES/DYNAMICS.F'
	INCLUDE 'SUBROUTINES/UMBSAM.F'
	INCLUDE 'SUBROUTINES/METDYN.F'
	!DEFINES MODULES FOR VARIABLES.
	MODULE PARAM
	!DEFINES GENERAL PARAMETERS.
	REAL*8	TEMP, MASS, BARRIER, DT
	INTEGER	NDIM, NWELL, N
	LOGICAL	THERMSTAT, RESTART_MD, ERROR_STAT
	CHARACTER (LEN=50) OUTPUTFILE, ERRORFILE
	CHARACTER (LEN=50) INPUTFILE1, INPUTFILE2, INPUTFILE3
	CHARACTER( LEN=50) ENERGYFILE, TRAJFILE
	END MODULE
	MODULE FORCEFIELD
	!DEFINES FORCEFIELD PARAMETERS.
	REAL*8, DIMENSION(:), ALLOCATABLE   ::  V, A
	REAL*8, DIMENSION(:,:), ALLOCATABLE :: RO
	END MODULE
	MODULE DYNAMICS_MOLDYN
	!DEFINES VARIABLES THAT CHANGE DURING THE SIMULATION.
	REAL*8, DIMENSION(:), ALLOCATABLE	:: POS, VEL, ACCL
	REAL*8  TIME, ENERGY_T, ENERGY_V, ENERGY, INST_TEMP
	REAL*8	V_FF, V_BIAS, V_UMBR
	INTEGER	ITER_MOLDYN
	END MODULE
	MODULE	CONSTANTS
	!DEFINES CONVERSION FACTORS AND UNIVERSAL CONSTANTS.
	REAL*8 MO, QO, H
	REAL*8 C, MP, ALPHA
	REAL*8 AO, EH, TO, VO, FO, KO
	REAL*8 PI 
	END MODULE
	MODULE UMBRSAMP
	!DEFINES UMBRELLA SAMPLING VARIABLES.
	LOGICAL	UMBR, RESTART_UMBR, UMBR_EXIT
	INTEGER UMBR_DIM, UMBR_FILESIZE, UMBR_COUNT
	INTEGER, DIMENSION(:), ALLOCATABLE 	:: UMBR_COMP, UMBR_N
	INTEGER, DIMENSION(:), ALLOCATABLE	:: UMBR_FILENUM
	REAL*8,	DIMENSION(:), ALLOCATABLE 	:: UMBR_K, UMBR_MEAN
	REAL*8, DIMENSION(:,:), ALLOCATABLE 	:: UMBR_RANGE
	CHARACTER (LEN=30)  UMBR_FILE
	CHARACTER (LEN=50)  UMBR_FILENAME
	END MODULE
	MODULE METADYN
	!DEFINES METADYNAMICS VARIABLES.
	LOGICAL META, RESTART_META, META_TRIGGER, WELL_TEMP
	INTEGER META_DIM, META_N, META_NMAX, META_COUNT, META_ITER
	INTEGER, DIMENSION(:), ALLOCATABLE 	:: META_CV
 	REAL*8,	 DIMENSION(:), ALLOCATABLE	:: META_WIDTH, META_HEIGHT
	REAL*8,	 DIMENSION(:,:), ALLOCATABLE	:: META_MEAN
	REAL*8	WIDTH, HEIGHT, META_TMIN, META_TMAX, DELTA_T
	CHARACTER (LEN=30) META_FILE
	CHARACTER (LEN=50) META_FILENAME
	REAL*8 GRID_MIN, GRID_MAX, DUMMY_CT, CNVG, CT 
	REAL*8, DIMENSION(:), ALLOCATABLE :: BIAS
	INTEGER NBINS
	END MODULE

	!THE PROGRAM BEGINS.
	PROGRAM TOYCODE
	!CALLS THE MODULES.
	USE PARAM
	USE FORCEFIELD
	USE DYNAMICS_MOLDYN
	USE CONSTANTS  
	USE UMBRSAMP 
	USE METADYN
	IMPLICIT NONE
	INTEGER THERMSTAT_TRIGGER, ITER, iter1, iter2
	REAL*8 DUMMY
	!DEFINES CONSTANTS.
	MO = 9.109D-31
	QO = 1.602D-19
	H  = 6.626D-34
	C  = 3.0D8
	ALPHA 	= 1.0/137.0
	MP = 1822
	AO = 5.29D-11
	EH = 4.3597D-18
	TO = 2.4188D-17
	VO = 2.187D6
	FO = 8.238D5
	KO = 3.1577D5
	PI= 3.1415926535D0
	!ASSIGNS NAMES OF I/O FILES.
	INPUTFILE1 = 'INPUTFILES/INPUT-MOLDYN'
	INPUTFILE2 = 'INPUTFILES/INPUT-UMBSAM'
	INPUTFILE3 = 'INPUTFILES/INPUT-METDYN'
	OUTPUTFILE = 'OUTPUTFILES/OUTPUTFILE'
	ERRORFILE  = 'OUTPUTFILES/ERRORFILE'
	ENERGYFILE = 'OUTPUTFILES/ENERGY'
	TRAJFILE   = 'OUTPUTFILES/TRAJ'
	!CREATES EMPTY OUTPUT FILES.
	CALL CREATE_FILE( OUTPUTFILE )
	CALL CREATE_FILE( ERRORFILE )
	CALL CREATE_FILE( ENERGYFILE )
        CALL CREATE_FILE( TRAJFILE )
	!PRINTS THE LABEL IN FILES.
	CALL PRINT_LABEL ( OUTPUTFILE )	
	CALL PRINT_LABEL ( ERRORFILE )
	!INPUTS PARAMETERS FROM INPUT FILE.
	CALL INPUT 
	!CONVERTS UNITS.
	CALL CHANGE_UNIT
	!CHECKS INPUT DATA.
	CALL CHECK_INPUT
	!PROCEEDS IF DATA MAKES SENSE.
	IF( ERROR_STAT .EQV. .FALSE. ) THEN
	!PRINTS MESSAGE IN ERROR FILE.
		CALL PRINT_COMMENT( ERRORFILE,
     &		'NO ERRORS. ')
	!CALCUALTES FORCEFIELD PARAMETERS.	
		CALL GET_FORCEFIELD
	!PRINTS ALL PARAMETERS.
		CALL PRINT_PARAM
	!INITIALIZES UMBRELLA/METADYNAMICS VARIABLES.
	UMBR_EXIT = .TRUE.
	IF( UMBR .EQV. .TRUE. ) CALL UMBR_INITIALIZE
	IF( META .EQV. .TRUE. ) CALL META_INITIALIZE
	!DYNAMICALLY DEFINES POSITION, VELOCITY AND ACCLERATION VARIABLES.
        ALLOCATE( POS(NDIM), VEL(NDIM), ACCL(NDIM) )
	!DYNAMICS BEGINS!
		DUMMY = 0.0D0
		OPEN( UNIT = 11, FILE = 'CNVG', STATUS = 'UNKNOWN')
		DO
	!INITIALIZES MOLDYN VARIABLES.
			CALL INITIALIZE
	!DEFINES THERMOSTAT TRIGGER.
		IF( THERMSTAT .EQV. .TRUE. ) THERMSTAT_TRIGGER = 
     &		670.0D0/(DT*8)
			IF( UMBR .EQV. .TRUE. ) THEN
				write(*,*) 'UMBRELLA SAMPLING # :', 
     &				UMBR_COUNT, 'IN PROCESS.'
				WRITE(*,*) 'CV TIME SERIES WRITTEN IN ', 
     &				TRIM(UMBR_FILE)
				WRITE(*,*) 
			ENDIF
                	CALL PRINT_MOLDYN
	!IMPLEMENTS MOLECULAR DYNAMICS.
			DO ITER_MOLDYN =1,N
				CALL EVOLVE
	!IMPLEMENTS THERMOSTAT.
				IF( (MOD(ITER_MOLDYN,THERMSTAT_TRIGGER) .EQ. 0) .AND. 
     &				(THERMSTAT .EQV. .TRUE. ) )   CALL THERMOSTAT
	!CHECKS CONDITION TO ADD A PERTURBATION.
				IF( META .EQV. .TRUE. ) THEN
					CALL DUMP_TRIGGER
	!ADDS A PERTUNBATION.
					IF( META_TRIGGER .EQV. .TRUE. ) THEN
						CALL DUMP
	!PRINTS THE TIME INDEPENDENT PARAMETER.
						WRITE(11,*) ITER_MOLDYN,CNVG
				!		DUMMY = CNVG
					ENDIF
				ENDIF
				CALL PRINT_MOLDYN
				CALL PRINT_CV
			ENDDO
	!PRINTS RESTART!
		CALL PRINT_RESTART
	!UPDATES UMBRELLA.
			IF( UMBR .EQV. .TRUE. ) CALL UMBR_UPDATE( )
	!CHECKS EXIT CONDITION.
			IF( UMBR_EXIT .EQV. .TRUE. ) EXIT
		ENDDO
	ENDIF
	CLOSE(11)
	!!PRINTS THE LABEL IN FILES.
        CALL PRINT_LABEL ( OUTPUTFILE ) 
        CALL PRINT_LABEL ( ERRORFILE )
	!PRINTS THE POTENTIAL ENERGY. 
	open( unit=1, file= 'pots', status='unknown')
	POS(1) = -0.10D0
	do iter1 = 1,101
		pos(2) = -0.1D0
		do iter2=1,101
			call get_v_ff
			write(1,*) pos(1),pos(2), v_ff*627.50D0 
			pos(2) = pos(2) +0.01D0
		enddo
		write(1,*)
		pos(1) = pos(1) + 0.01D0
	enddo

	!DEALLOCATES VARIABLE
!	DEALLOCATE(RO, POS, VEL, ACCL )
!        DEALLOCATE(UMBR_COMP, UMBR_N, UMBR_FILENUM, UMBR_K,
!     &  UMBR_MEAN, UMBR_RANGE)
 !       DEALLOCATE(META_CV, META_HEIGHT, META_WIDTH, META_MEAN)
	END PROGRAM



